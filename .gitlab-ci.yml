# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
# clean build environments each time - slower, but catches more errors
variables:
  # some shortcuts
  PREP_SERVICE_URL: http://prep-services-1.swl-i.de:8252/hello
  SERVICE_PORT: 8252
  #Maven variables
  MAVEN_CLI_OPTS: --batch-mode --show-version
  MAVEN_OPTS: "-Dmaven.repo.local=.${CI_PROJECT_DIR}/m2"

image: maven:3.5.3-jdk-8-alpine

include:
  - project: pid/gitlab-ci-jobs
    file: dind-service.yml
  - project: pid/gitlab-ci-jobs
    file: docker-web-backend.yml

# we have to use the following "cache" for maven output
cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/

stages:
  - build
  - images
  - test
  - release


#
# ----------------------------------------------------------------------
# BUILD STAGE
#

# use the same procedure like on the developers machine
build:
  stage: build
  script: mvn -B -Dmaven.test.skip=true compile package
  artifacts:
    paths:
      - target/*

#
# ----------------------------------------------------------------------
# IMAGE STAGE
#

images:
  extends: .images

#
# ----------------------------------------------------------------------
# TESTING STAGE
#

# use the same procedure like on the developers machine
# testing should happen on every branch!

test:unit:
  stage: test
  script: mvn $(MAVEN_OPTS) $(MAVEN_CLI_OPTS) -B -Dtest=*UnitTest* test



#
# ----------------------------------------------------------------------
# RELEASING STAGE
#

# now, after the tests have passed, we'll prepare and release the final docker image
# this is only done for the master branch!
release:
  extends: .tagnpush

#
# ----------------------------------------------------------------------
# DEPLOYING STAGE
#

# finally, lets deploy!
# gitlab deployments textbook example https://docs.gitlab.com/ee/ci/ssh_keys/

deploy prep: {extends: .prep}
